"inoremap {<cr> {<cr><BS>}<ESC>O    
"if set filetype indent on, please use the line above.

inoremap {<cr> {<cr>}<ESC>O<TAB>
"if you only set autoindent, please use the line above

"nnoremap <BS> la<BS><BS>
"if you have () and the cursor is in the middle (now you are in insert mode)
"now you can just press <ESC> and then press <BS> to delete ( and )

function! CuteLeftBracket(character1, character2)
	let l:line = getline(".")
	let l:nextCharacter = l:line[col(".")]
	echom col(".")
	echom l:nextCharacter
	if !((char2nr(l:nextCharacter) >= 33) && (char2nr(l:nextCharacter) <= 126))
		execute "normal! a" . a:character2
		execute "normal! h"
	endif
endfunction

function! CuteRightBracket(character)
	let l:line = getline(".")
	let l:nextCharacter = l:line[col(".")] 
	if l:nextCharacter == a:character 
		execute "normal! l"
	else
		execute "normal! a" . a:character
	end
endfunction

"inoremap { {<ESC>:call CuteLeftBracket('{', '}')<cr>a
inoremap ( (<ESC>:call CuteLeftBracket('(', ')')<cr>a
inoremap [ [<ESC>:call CuteLeftBracket('[', ']')<cr>a
inoremap ) <ESC>:call CuteRightBracket(')')<cr>a
inoremap ] <ESC>:call CuteRightBracket(']')<cr>a
inoremap } <ESC>:call CuteRightBracket('}')<cr>a
"above are something which can make vim use ()[]{}just like Xcode

function! CuteQuote(character)
	let l:line = getline(".")
	let l:nextCharacter = l:line[col(".")]
	let l:previousCharacter = l:line[col(".") - 2]
	if l:nextCharacter != a:character && l:previousCharacter != a:character
		if !((char2nr(l:nextCharacter) >= 33) && (char2nr(l:nextCharacter) <= 126))
			exec "normal! a" . a:character
			exec "normal! h"
		end
		exec "normal! a" . a:character
		if(char2nr(l:previousCharacter) == 0)
			exec "normal! h"
		endif
	else
		exec "normal! l"
	endif
endfunction
inoremap " <ESC>:call CuteQuote("\"")<cr>a
inoremap ' <ESC>:call CuteQuote("'")<cr>a

function! CuteDelete()
	let l:line = getline(".")
	let l:Character = l:line[col(".") - 3]
	let l:nextCharacter = l:line[col(".")]
	if col(".") != 2
		exec "normal x"
		if char2nr(l:nextCharacter) != 0 
			exec "normal h"
			if (((l:nextCharacter == ")") && (l:Character == "(")) || 
						\((l:nextCharacter == "}") && (l:Character == "{"))	||
						\((l:nextCharacter == "]") && (l:Character == "[")))	
				exec "normal x"
			elseif	(((l:nextCharacter == "'") && (l:Character == "'"))	||
						\((l:nextCharacter == "\"") && (l:Character == "\"")))	 
				let l:BackslashIndicator=l:line[col(".") - 3]
				let l:pos=col(".") - 3
				let l:counter=0
				while((l:pos > 0) && (l:BackslashIndicator == "\\"))
					let l:pos=l:pos - 1
					let l:counter=l:counter + 1
					let l:BackslashIndicator=l:line[l:pos]
				endwhile
				while(l:counter > 0)
					let l:counter=l:counter - 2
				endwhile
				if l:counter != -1
					exec "normal x"
				endif
			endif
		endif
	else
		if char2nr(l:Character) == 0
			exec "normal hx"
		endif
	endif
endfunction

inoremap <BS> ..<ESC>:call CuteDelete()<CR>a<BS><BS>
